// Autogenerated from Pigeon (v25.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

/// Holder
class IOSOnDemandResourcesPigeon {
  IOSOnDemandResourcesPigeon({
    required this.resourceMap,
  });

  /// Map from a On-Demand Resource Tag to its Resource
  Map<String, IOSOnDemandResourcePigeon> resourceMap;

  Object encode() {
    return <Object?>[
      resourceMap,
    ];
  }

  static IOSOnDemandResourcesPigeon decode(Object result) {
    result as List<Object?>;
    return IOSOnDemandResourcesPigeon(
      resourceMap: (result[0] as Map<Object?, Object?>?)!.cast<String, IOSOnDemandResourcePigeon>(),
    );
  }
}

/// https://developer.apple.com/documentation/foundation/nsbundleresourcerequest
class IOSOnDemandResourcePigeon {
  IOSOnDemandResourcePigeon({
    required this.tag,
    this.error,
    required this.condition,
    required this.loadingPriority,
    required this.progress,
  });

  String tag;

  /// https://developer.apple.com/documentation/foundation/nsbundleresourcerequest/1614840-beginaccessingresources
  IOSNSErrorPigeon? error;

  /// https://developer.apple.com/documentation/foundation/nsbundleresourcerequest/1614834-conditionallybeginaccessingresou
  bool condition;

  /// https://developer.apple.com/documentation/foundation/nsbundleresourcerequest/1614841-loadingpriority
  double loadingPriority;

  /// https://developer.apple.com/documentation/foundation/nsbundleresourcerequest/1614838-progress
  IOSProgressPigeon progress;

  Object encode() {
    return <Object?>[
      tag,
      error,
      condition,
      loadingPriority,
      progress,
    ];
  }

  static IOSOnDemandResourcePigeon decode(Object result) {
    result as List<Object?>;
    return IOSOnDemandResourcePigeon(
      tag: result[0]! as String,
      error: result[1] as IOSNSErrorPigeon?,
      condition: result[2]! as bool,
      loadingPriority: result[3]! as double,
      progress: result[4]! as IOSProgressPigeon,
    );
  }
}

/// https://developer.apple.com/documentation/foundation/nserror
class IOSNSErrorPigeon {
  IOSNSErrorPigeon({
    required this.code,
    required this.domain,
    required this.localizedDescription,
  });

  int code;

  String domain;

  String localizedDescription;

  Object encode() {
    return <Object?>[
      code,
      domain,
      localizedDescription,
    ];
  }

  static IOSNSErrorPigeon decode(Object result) {
    result as List<Object?>;
    return IOSNSErrorPigeon(
      code: result[0]! as int,
      domain: result[1]! as String,
      localizedDescription: result[2]! as String,
    );
  }
}

/// https://developer.apple.com/documentation/foundation/progress
class IOSProgressPigeon {
  IOSProgressPigeon({
    required this.isCancelled,
    required this.isPaused,
    required this.fractionCompleted,
    required this.isFinished,
  });

  bool isCancelled;

  bool isPaused;

  double fractionCompleted;

  bool isFinished;

  Object encode() {
    return <Object?>[
      isCancelled,
      isPaused,
      fractionCompleted,
      isFinished,
    ];
  }

  static IOSProgressPigeon decode(Object result) {
    result as List<Object?>;
    return IOSProgressPigeon(
      isCancelled: result[0]! as bool,
      isPaused: result[1]! as bool,
      fractionCompleted: result[2]! as double,
      isFinished: result[3]! as bool,
    );
  }
}


class _PigeonCodec extends StandardMessageCodec {
  const _PigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is int) {
      buffer.putUint8(4);
      buffer.putInt64(value);
    }    else if (value is IOSOnDemandResourcesPigeon) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    }    else if (value is IOSOnDemandResourcePigeon) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    }    else if (value is IOSNSErrorPigeon) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    }    else if (value is IOSProgressPigeon) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 129: 
        return IOSOnDemandResourcesPigeon.decode(readValue(buffer)!);
      case 130: 
        return IOSOnDemandResourcePigeon.decode(readValue(buffer)!);
      case 131: 
        return IOSNSErrorPigeon.decode(readValue(buffer)!);
      case 132: 
        return IOSProgressPigeon.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

const StandardMethodCodec pigeonMethodCodec = StandardMethodCodec(_PigeonCodec());

Stream<IOSOnDemandResourcePigeon> streamOnDemandResource( {String instanceName = ''}) {
  if (instanceName.isNotEmpty) {
    instanceName = '.$instanceName';
  }
  final EventChannel streamOnDemandResourceChannel =
      EventChannel('dev.flutter.pigeon.online_assets.OnDemandResourcesEventChannelMethods.streamOnDemandResource$instanceName', pigeonMethodCodec);
  return streamOnDemandResourceChannel.receiveBroadcastStream().map((dynamic event) {
    return event as IOSOnDemandResourcePigeon;
  });
}
    

class OnDemandResourcesHostApiMethods {
  /// Constructor for [OnDemandResourcesHostApiMethods].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  OnDemandResourcesHostApiMethods({BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : pigeonVar_binaryMessenger = binaryMessenger,
        pigeonVar_messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

  Future<IOSOnDemandResourcesPigeon> requestNSBundleResourceRequests({required List<String> tags}) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.online_assets.OnDemandResourcesHostApiMethods.requestNSBundleResourceRequests$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[tags]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as IOSOnDemandResourcesPigeon?)!;
    }
  }

  Future<IOSOnDemandResourcesPigeon> beginAccessingResources({required List<String> tags}) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.online_assets.OnDemandResourcesHostApiMethods.beginAccessingResources$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[tags]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as IOSOnDemandResourcesPigeon?)!;
    }
  }

  Future<String?> getAbsoluteAssetPath({required String tag, required String relativeAssetPathWithTagNamespace, int extensionLevel = 1, }) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.online_assets.OnDemandResourcesHostApiMethods.getAbsoluteAssetPath$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[tag, relativeAssetPathWithTagNamespace, extensionLevel]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return (pigeonVar_replyList[0] as String?);
    }
  }
}
