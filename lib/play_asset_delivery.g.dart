// Autogenerated from Pigeon (v25.1.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}
bool _deepEquals(Object? a, Object? b) {
  if (a is List && b is List) {
    return a.length == b.length &&
        a.indexed
        .every(((int, dynamic) item) => _deepEquals(item.$2, b[item.$1]));
  }
  if (a is Map && b is Map) {
    final Iterable<Object?> keys = (a as Map<Object?, Object?>).keys;
    return a.length == b.length && keys.every((Object? key) =>
        (b as Map<Object?, Object?>).containsKey(key) &&
        _deepEquals(a[key], b[key]));
  }
  return a == b;
}
    

/// https://developer.android.com/reference/com/google/android/play/core/assetpacks/model/AssetPackErrorCode
enum AndroidAssetPackErrorCode {
  noError,
  appUnavailable,
  packUnavailable,
  invalidRequest,
  downloadNotFound,
  apiNotAvailable,
  networkError,
  accessDenied,
  insufficientStorage,
  appNotOwned,
  confirmationNotRequired,
  unrecognizedInstallation,
  internalError,
  unknown,
}

/// https://developer.android.com/reference/com/google/android/play/core/assetpacks/model/AssetPackStatus
enum AndroidAssetPackStatus {
  unknown,
  notInstalled,
  pending,
  waitingForWifi,
  requiresUserConfirmation,
  downloading,
  transferring,
  completed,
  failed,
  canceled,
}

/// https://developer.android.com/reference/com/google/android/play/core/assetpacks/AssetPackStates
class AndroidAssetPackStatesPigeon {
  AndroidAssetPackStatesPigeon({
    required this.packStates,
    required this.totalBytes,
  });

  /// Map from a pack's name to its state
  Map<String, AndroidAssetPackStatePigeon> packStates;

  int totalBytes;

  List<Object?> _toList() {
    return <Object?>[
      packStates,
      totalBytes,
    ];
  }

  Object encode() {
    return _toList();  }

  static AndroidAssetPackStatesPigeon decode(Object result) {
    result as List<Object?>;
    return AndroidAssetPackStatesPigeon(
      packStates: (result[0] as Map<Object?, Object?>?)!.cast<String, AndroidAssetPackStatePigeon>(),
      totalBytes: result[1]! as int,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! AndroidAssetPackStatesPigeon || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return 
      _deepEquals(packStates, other.packStates)
      && totalBytes == other.totalBytes;
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

/// https://developer.android.com/reference/com/google/android/play/core/assetpacks/AssetPackState
class AndroidAssetPackStatePigeon {
  AndroidAssetPackStatePigeon({
    required this.bytesDownloaded,
    required this.errorCode,
    required this.name,
    required this.status,
    required this.totalBytesToDownload,
    required this.transferProgressPercentage,
  });

  int bytesDownloaded;

  AndroidAssetPackErrorCode errorCode;

  String name;

  AndroidAssetPackStatus status;

  int totalBytesToDownload;

  int transferProgressPercentage;

  List<Object?> _toList() {
    return <Object?>[
      bytesDownloaded,
      errorCode,
      name,
      status,
      totalBytesToDownload,
      transferProgressPercentage,
    ];
  }

  Object encode() {
    return _toList();  }

  static AndroidAssetPackStatePigeon decode(Object result) {
    result as List<Object?>;
    return AndroidAssetPackStatePigeon(
      bytesDownloaded: result[0]! as int,
      errorCode: result[1]! as AndroidAssetPackErrorCode,
      name: result[2]! as String,
      status: result[3]! as AndroidAssetPackStatus,
      totalBytesToDownload: result[4]! as int,
      transferProgressPercentage: result[5]! as int,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! AndroidAssetPackStatePigeon || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return 
      bytesDownloaded == other.bytesDownloaded
      && errorCode == other.errorCode
      && name == other.name
      && status == other.status
      && totalBytesToDownload == other.totalBytesToDownload
      && transferProgressPercentage == other.transferProgressPercentage;
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}


class _PigeonCodec extends StandardMessageCodec {
  const _PigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is int) {
      buffer.putUint8(4);
      buffer.putInt64(value);
    }    else if (value is AndroidAssetPackErrorCode) {
      buffer.putUint8(129);
      writeValue(buffer, value.index);
    }    else if (value is AndroidAssetPackStatus) {
      buffer.putUint8(130);
      writeValue(buffer, value.index);
    }    else if (value is AndroidAssetPackStatesPigeon) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    }    else if (value is AndroidAssetPackStatePigeon) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 129: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : AndroidAssetPackErrorCode.values[value];
      case 130: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : AndroidAssetPackStatus.values[value];
      case 131: 
        return AndroidAssetPackStatesPigeon.decode(readValue(buffer)!);
      case 132: 
        return AndroidAssetPackStatePigeon.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

const StandardMethodCodec pigeonMethodCodec = StandardMethodCodec(_PigeonCodec());

Stream<AndroidAssetPackStatePigeon> streamAssetPackState( {String instanceName = ''}) {
  if (instanceName.isNotEmpty) {
    instanceName = '.$instanceName';
  }
  final EventChannel streamAssetPackStateChannel =
      EventChannel('dev.flutter.pigeon.online_assets.PlayAssetDeliveryEventChannelMethods.streamAssetPackState$instanceName', pigeonMethodCodec);
  return streamAssetPackStateChannel.receiveBroadcastStream().map((dynamic event) {
    return event as AndroidAssetPackStatePigeon;
  });
}
    

class PlayAssetDeliveryHostApiMethods {
  /// Constructor for [PlayAssetDeliveryHostApiMethods].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  PlayAssetDeliveryHostApiMethods({BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : pigeonVar_binaryMessenger = binaryMessenger,
        pigeonVar_messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

  Future<AndroidAssetPackStatesPigeon> requestPackStates({required List<String> packNames}) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.online_assets.PlayAssetDeliveryHostApiMethods.requestPackStates$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[packNames]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as AndroidAssetPackStatesPigeon?)!;
    }
  }

  Future<AndroidAssetPackStatesPigeon> requestFetch({required List<String> packNames}) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.online_assets.PlayAssetDeliveryHostApiMethods.requestFetch$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[packNames]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as AndroidAssetPackStatesPigeon?)!;
    }
  }

  /// It is not possible to obtain the file path of the asset file itself.
  /// Therefore, the path of the copied file as a temporary file is obtained.
  /// Note that using this function uses twice as much device storage due to the asset and the copied files.
  ///
  /// If this function is called and the file has already been copied and the file size is the same, the overwrite copy process is not performed.
  ///
  /// If you are replacing asset files when updating your app and the file size is the same as the file before the replacement, you will need to call [getAssetFilePathOnDownloadAsset] function.
  Future<String?> getCopiedAssetFilePathOnInstallTimeAsset({required String assetPackName, required String relativeAssetPath}) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.online_assets.PlayAssetDeliveryHostApiMethods.getCopiedAssetFilePathOnInstallTimeAsset$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[assetPackName, relativeAssetPath]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return (pigeonVar_replyList[0] as String?);
    }
  }

  /// Delete the copied asset file.
  ///
  /// Returns true if the target file or folder was successfully deleted.
  /// Also returns true if the target file or folder does not yet exist.
  ///
  /// If [assetPackName] = null, all install-time pack folder is deleted.
  /// If [relativeAssetPath] = null, [assetPackName]'s install-time pack folder is deleted.
  ///
  /// Call this function if you are replacing assets and the file size is the same as the file before the replacement and want to be sure to update the files.
  Future<bool> deleteCopiedAssetFileOnInstallTimeAsset({String? assetPackName, String? relativeAssetPath}) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.online_assets.PlayAssetDeliveryHostApiMethods.deleteCopiedAssetFileOnInstallTimeAsset$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[assetPackName, relativeAssetPath]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<String?> getAssetFilePathOnDownloadAsset({required String assetPackName, required String relativeAssetPath}) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.online_assets.PlayAssetDeliveryHostApiMethods.getAssetFilePathOnDownloadAsset$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[assetPackName, relativeAssetPath]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return (pigeonVar_replyList[0] as String?);
    }
  }
}
