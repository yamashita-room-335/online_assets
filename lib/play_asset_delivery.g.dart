// Autogenerated from Pigeon (v25.1.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

List<Object?> wrapResponse({Object? result, PlatformException? error, bool empty = false}) {
  if (empty) {
    return <Object?>[];
  }
  if (error == null) {
    return <Object?>[result];
  }
  return <Object?>[error.code, error.message, error.details];
}
bool _deepEquals(Object? a, Object? b) {
  if (a is List && b is List) {
    return a.length == b.length &&
        a.indexed
        .every(((int, dynamic) item) => _deepEquals(item.$2, b[item.$1]));
  }
  if (a is Map && b is Map) {
    final Iterable<Object?> keys = (a as Map<Object?, Object?>).keys;
    return a.length == b.length && keys.every((Object? key) =>
        (b as Map<Object?, Object?>).containsKey(key) &&
        _deepEquals(a[key], b[key]));
  }
  return a == b;
}
    

/// https://developer.android.com/reference/com/google/android/play/core/assetpacks/model/AssetPackErrorCode
enum AndroidAssetPackErrorCode {
  noError,
  appUnavailable,
  packUnavailable,
  invalidRequest,
  downloadNotFound,
  apiNotAvailable,
  networkError,
  accessDenied,
  insufficientStorage,
  appNotOwned,
  confirmationNotRequired,
  unrecognizedInstallation,
  internalError,
  unknown,
}

/// https://developer.android.com/reference/com/google/android/play/core/assetpacks/model/AssetPackStatus
enum AndroidAssetPackStatus {
  unknown,
  notInstalled,
  pending,
  waitingForWifi,
  requiresUserConfirmation,
  downloading,
  transferring,
  completed,
  failed,
  canceled,
}

/// https://developer.android.com/reference/com/google/android/play/core/assetpacks/AssetPackStates
class AndroidAssetPackStatesPigeon {
  AndroidAssetPackStatesPigeon({
    required this.packStates,
    required this.totalBytes,
  });

  /// Map from a pack's name to its state
  Map<String, AndroidAssetPackStatePigeon> packStates;

  int totalBytes;

  List<Object?> _toList() {
    return <Object?>[
      packStates,
      totalBytes,
    ];
  }

  Object encode() {
    return _toList();  }

  static AndroidAssetPackStatesPigeon decode(Object result) {
    result as List<Object?>;
    return AndroidAssetPackStatesPigeon(
      packStates: (result[0] as Map<Object?, Object?>?)!.cast<String, AndroidAssetPackStatePigeon>(),
      totalBytes: result[1]! as int,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! AndroidAssetPackStatesPigeon || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return 
      _deepEquals(packStates, other.packStates)
      && totalBytes == other.totalBytes;
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

/// https://developer.android.com/reference/com/google/android/play/core/assetpacks/AssetPackState
class AndroidAssetPackStatePigeon {
  AndroidAssetPackStatePigeon({
    required this.bytesDownloaded,
    required this.errorCode,
    required this.name,
    required this.status,
    required this.totalBytesToDownload,
    required this.transferProgressPercentage,
  });

  int bytesDownloaded;

  AndroidAssetPackErrorCode errorCode;

  String name;

  AndroidAssetPackStatus status;

  int totalBytesToDownload;

  int transferProgressPercentage;

  List<Object?> _toList() {
    return <Object?>[
      bytesDownloaded,
      errorCode,
      name,
      status,
      totalBytesToDownload,
      transferProgressPercentage,
    ];
  }

  Object encode() {
    return _toList();  }

  static AndroidAssetPackStatePigeon decode(Object result) {
    result as List<Object?>;
    return AndroidAssetPackStatePigeon(
      bytesDownloaded: result[0]! as int,
      errorCode: result[1]! as AndroidAssetPackErrorCode,
      name: result[2]! as String,
      status: result[3]! as AndroidAssetPackStatus,
      totalBytesToDownload: result[4]! as int,
      transferProgressPercentage: result[5]! as int,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! AndroidAssetPackStatePigeon || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return 
      bytesDownloaded == other.bytesDownloaded
      && errorCode == other.errorCode
      && name == other.name
      && status == other.status
      && totalBytesToDownload == other.totalBytesToDownload
      && transferProgressPercentage == other.transferProgressPercentage;
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}


class _PigeonCodec extends StandardMessageCodec {
  const _PigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is int) {
      buffer.putUint8(4);
      buffer.putInt64(value);
    }    else if (value is AndroidAssetPackErrorCode) {
      buffer.putUint8(129);
      writeValue(buffer, value.index);
    }    else if (value is AndroidAssetPackStatus) {
      buffer.putUint8(130);
      writeValue(buffer, value.index);
    }    else if (value is AndroidAssetPackStatesPigeon) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    }    else if (value is AndroidAssetPackStatePigeon) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 129: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : AndroidAssetPackErrorCode.values[value];
      case 130: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : AndroidAssetPackStatus.values[value];
      case 131: 
        return AndroidAssetPackStatesPigeon.decode(readValue(buffer)!);
      case 132: 
        return AndroidAssetPackStatePigeon.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

const StandardMethodCodec pigeonMethodCodec = StandardMethodCodec(_PigeonCodec());

Stream<AndroidAssetPackStatePigeon> streamAssetPackState( {String instanceName = ''}) {
  if (instanceName.isNotEmpty) {
    instanceName = '.$instanceName';
  }
  final EventChannel streamAssetPackStateChannel =
      EventChannel('dev.flutter.pigeon.online_assets.PlayAssetDeliveryEventChannelApi.streamAssetPackState$instanceName', pigeonMethodCodec);
  return streamAssetPackStateChannel.receiveBroadcastStream().map((dynamic event) {
    return event as AndroidAssetPackStatePigeon;
  });
}
    

class PlayAssetDeliveryHostApi {
  /// Constructor for [PlayAssetDeliveryHostApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  PlayAssetDeliveryHostApi({BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : pigeonVar_binaryMessenger = binaryMessenger,
        pigeonVar_messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

  /// https://developer.android.com/reference/com/google/android/play/core/ktx/package-summary#requestpackstates
  Future<AndroidAssetPackStatesPigeon> requestPackStates({required List<String> packNames}) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.online_assets.PlayAssetDeliveryHostApi.requestPackStates$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[packNames]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as AndroidAssetPackStatesPigeon?)!;
    }
  }

  /// https://developer.android.com/reference/com/google/android/play/core/ktx/package-summary#requestfetch
  Future<AndroidAssetPackStatesPigeon> requestFetch({required List<String> packNames}) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.online_assets.PlayAssetDeliveryHostApi.requestFetch$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[packNames]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as AndroidAssetPackStatesPigeon?)!;
    }
  }

  /// https://developer.android.com/reference/com/google/android/play/core/assetpacks/AssetPackManager#showCellularDataConfirmation(android.app.Activity)
  Future<bool> showConfirmationDialog() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.online_assets.PlayAssetDeliveryHostApi.showConfirmationDialog$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  /// Get the path to the copy of the Android install-time asset file.
  ///
  /// It is not possible to obtain the file path of the install-time asset file itself.
  /// Therefore, the path of the file copied to temporary directory is obtained.
  ///
  /// If the file is still in the temporary folder when this function is called and the file size is the same as the asset, file is reused.
  /// Therefore, if an asset is replaced by app update, etc., and the file size is exactly the same but the contents are different, there is a problem that the previous file will be used.
  /// If you want to avoid this case, you call [deleteCopiedAssetFileOnInstallTimeAsset] function to delete cache on app update.
  /// However, the possibility that the file contents are different and the file size is exactly the same is quite small, so you do not need to worry too much about it.
  ///
  /// Note that using this function uses twice as much device storage due to the assets of the system and the copied files.
  /// The copied files will be deleted by system when storage space is running low due to temporary files, but will be copied again on use.
  Future<String?> getCopiedAssetFilePathOnInstallTimeAsset({required String assetPackName, required String relativeAssetPath}) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.online_assets.PlayAssetDeliveryHostApi.getCopiedAssetFilePathOnInstallTimeAsset$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[assetPackName, relativeAssetPath]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return (pigeonVar_replyList[0] as String?);
    }
  }

  /// Delete the copied asset file.
  ///
  /// Returns true if the target file was successfully deleted.
  /// Also returns true if the target file does not yet exist.
  ///
  /// If the file is still in the temporary folder when [getCopiedAssetFilePathOnInstallTimeAsset] function is called and the file size is the same as the asset, file is reused.
  /// Therefore, if an asset is replaced by app update, and the file size is exactly the same but the contents are different, there is a problem that the previous file will be used.
  /// If you want to avoid this case, you call delete function when your app update.
  /// However, the possibility that the file contents are different and the file size is exactly the same is quite small, so you do not need to worry too much about it.
  Future<bool> deleteCopiedAssetFileOnInstallTimeAsset({required String assetPackName, required String relativeAssetPath}) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.online_assets.PlayAssetDeliveryHostApi.deleteCopiedAssetFileOnInstallTimeAsset$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[assetPackName, relativeAssetPath]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<bool> deleteCopiedAssetFolderOnInstallTimeAsset({required String assetPackName}) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.online_assets.PlayAssetDeliveryHostApi.deleteCopiedAssetFolderOnInstallTimeAsset$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[assetPackName]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<bool> deleteAllCopiedAssetFoldersOnInstallTimeAsset() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.online_assets.PlayAssetDeliveryHostApi.deleteAllCopiedAssetFoldersOnInstallTimeAsset$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<String?> getAssetFilePathOnDownloadAsset({required String assetPackName, required String relativeAssetPath}) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.online_assets.PlayAssetDeliveryHostApi.getAssetFilePathOnDownloadAsset$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[assetPackName, relativeAssetPath]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return (pigeonVar_replyList[0] as String?);
    }
  }
}

abstract class PlayAssetDeliveryFlutterApi {
  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  /// https://developer.android.com/reference/com/google/android/play/core/assetpacks/AssetPackManager#showCellularDataConfirmation(android.app.Activity)
  void callbackConfirmationDialogResult(bool ok);

  static void setUp(PlayAssetDeliveryFlutterApi? api, {BinaryMessenger? binaryMessenger, String messageChannelSuffix = '',}) {
    messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.online_assets.PlayAssetDeliveryFlutterApi.callbackConfirmationDialogResult$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.online_assets.PlayAssetDeliveryFlutterApi.callbackConfirmationDialogResult was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final bool? arg_ok = (args[0] as bool?);
          assert(arg_ok != null,
              'Argument for dev.flutter.pigeon.online_assets.PlayAssetDeliveryFlutterApi.callbackConfirmationDialogResult was null, expected non-null bool.');
          try {
            api.callbackConfirmationDialogResult(arg_ok!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }
}
